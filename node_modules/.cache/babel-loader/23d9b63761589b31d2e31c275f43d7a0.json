{"ast":null,"code":"var _jsxFileName = \"/Users/deniscrish/Documents/react-apps/star-db/src/components/item-details/item-details.js\";\nimport React, { Component } from 'react';\nimport ErrorButton from '../error-button/error-button';\nimport './item-details.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Record = _ref => {\n  let {\n    item,\n    field,\n    label\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    className: \"list-group-item\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"term\",\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: item[field]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Record;\nexport { Record };\nexport default class ItemDetails extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      item: null,\n      image: null\n    };\n  }\n\n  componentDidMount() {\n    this.updateItem();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.itemId !== prevProps.itemId || this.props.itemId !== prevProps.itemId) {\n      this.updateItem();\n    }\n  }\n\n  updateItem() {\n    const {\n      itemId,\n      getData,\n      getImageUrl\n    } = this.props;\n\n    if (!itemId) {\n      return;\n    }\n\n    getData(itemId).then(item => {\n      this.setState({\n        item,\n        image: getImageUrl(item)\n      });\n    });\n  }\n\n  render() {\n    const {\n      item,\n      image\n    } = this.state;\n\n    if (!item) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Select a item from a list\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 20\n      }, this);\n    }\n\n    const {\n      name\n    } = item;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"item-details card\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"item-image\",\n        src: image,\n        alt: \"item\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"list-group list-group-flush\",\n          children: React.Children.map(this.props.children, child => {\n            return /*#__PURE__*/React.cloneElement(child, {\n              item\n            });\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ErrorButton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Record\");","map":{"version":3,"sources":["/Users/deniscrish/Documents/react-apps/star-db/src/components/item-details/item-details.js"],"names":["React","Component","ErrorButton","Record","item","field","label","ItemDetails","state","image","componentDidMount","updateItem","componentDidUpdate","prevProps","props","itemId","getData","getImageUrl","then","setState","render","name","Children","map","children","child","cloneElement"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAOC,WAAP,MAAwB,8BAAxB;AAEA,OAAO,oBAAP;;;AAEA,MAAMC,MAAM,GAAG,QAA4B;AAAA,MAA3B;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,GAA2B;AACvC,sBACI;AAAI,IAAA,SAAS,EAAC,iBAAd;AAAA,4BACI;AAAM,MAAA,SAAS,EAAC,MAAhB;AAAA,gBAAwBA;AAAxB;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA,gBAAOF,IAAI,CAACC,KAAD;AAAX;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH,CAPD;;KAAMF,M;AASN,SACIA,MADJ;AAIA,eAAe,MAAMI,WAAN,SAA0BN,SAA1B,CAAoC;AAAA;AAAA;AAAA,SAE/CO,KAF+C,GAEvC;AACJJ,MAAAA,IAAI,EAAE,IADF;AAEJK,MAAAA,KAAK,EAAE;AAFH,KAFuC;AAAA;;AAO/CC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,UAAL;AACH;;AAEDC,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC1B,QAAI,KAAKC,KAAL,CAAWC,MAAX,KAAsBF,SAAS,CAACE,MAAhC,IACA,KAAKD,KAAL,CAAWC,MAAX,KAAsBF,SAAS,CAACE,MADpC,EAC4C;AACxC,WAAKJ,UAAL;AACH;AACJ;;AAEDA,EAAAA,UAAU,GAAG;AACT,UAAM;AAAEI,MAAAA,MAAF;AAAUC,MAAAA,OAAV;AAAmBC,MAAAA;AAAnB,QAAmC,KAAKH,KAA9C;;AACA,QAAI,CAACC,MAAL,EAAa;AACT;AACH;;AAEDC,IAAAA,OAAO,CAACD,MAAD,CAAP,CACKG,IADL,CACWd,IAAD,IAAU;AACZ,WAAKe,QAAL,CAAc;AACVf,QAAAA,IADU;AAEVK,QAAAA,KAAK,EAAEQ,WAAW,CAACb,IAAD;AAFR,OAAd;AAIH,KANL;AAOH;;AAEDgB,EAAAA,MAAM,GAAG;AAEL,UAAM;AAAEhB,MAAAA,IAAF;AAAQK,MAAAA;AAAR,QAAkB,KAAKD,KAA7B;;AACA,QAAI,CAACJ,IAAL,EAAW;AACP,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACH;;AAED,UAAM;AAAEiB,MAAAA;AAAF,QAAWjB,IAAjB;AAEA,wBACI;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,YAAf;AACI,QAAA,GAAG,EAAEK,KADT;AAEI,QAAA,GAAG,EAAC;AAFR;AAAA;AAAA;AAAA;AAAA,cADJ,eAKI;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,gCACI;AAAA,oBAAKY;AAAL;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAI,UAAA,SAAS,EAAC,6BAAd;AAAA,oBAEQrB,KAAK,CAACsB,QAAN,CAAeC,GAAf,CAAmB,KAAKT,KAAL,CAAWU,QAA9B,EAAyCC,KAAD,IAAW;AAC/C,gCAAOzB,KAAK,CAAC0B,YAAN,CAAmBD,KAAnB,EAA0B;AAAErB,cAAAA;AAAF,aAA1B,CAAP;AACH,WAFD;AAFR;AAAA;AAAA;AAAA;AAAA,gBAFJ,eASI,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,gBATJ;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAmBH;;AA7D8C","sourcesContent":["import React, { Component } from 'react';\n\nimport ErrorButton from '../error-button/error-button';\n\nimport './item-details.css';\n\nconst Record = ({ item, field, label }) => {\n    return (\n        <li className=\"list-group-item\">\n            <span className=\"term\">{label}</span>\n            <span>{item[field]}</span>\n        </li>\n    );\n};\n\nexport {\n    Record\n};\n\nexport default class ItemDetails extends Component {\n\n    state = {\n        item: null,\n        image: null\n    };\n\n    componentDidMount() {\n        this.updateItem();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.itemId !== prevProps.itemId ||\n            this.props.itemId !== prevProps.itemId) {\n            this.updateItem();\n        }\n    }\n\n    updateItem() {\n        const { itemId, getData, getImageUrl } = this.props;\n        if (!itemId) {\n            return;\n        }\n\n        getData(itemId)\n            .then((item) => {\n                this.setState({\n                    item,\n                    image: getImageUrl(item)\n                });\n            });\n    }\n\n    render() {\n\n        const { item, image } = this.state;\n        if (!item) {\n            return <span>Select a item from a list</span>;\n        }\n\n        const { name } = item;\n\n        return (\n            <div className=\"item-details card\">\n                <img className=\"item-image\"\n                    src={image}\n                    alt=\"item\" />\n\n                <div className=\"card-body\">\n                    <h4>{name}</h4>\n                    <ul className=\"list-group list-group-flush\">\n                        {\n                            React.Children.map(this.props.children, (child) => {\n                                return React.cloneElement(child, { item });\n                            })\n                        }\n                    </ul>\n                    <ErrorButton />\n                </div>\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}