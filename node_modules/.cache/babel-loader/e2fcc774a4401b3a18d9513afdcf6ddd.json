{"ast":null,"code":"var _jsxFileName = \"/Users/deniscrish/Documents/react-apps/star-db/src/components/hoc-helpers/with-data.js\";\nimport React, { Component } from 'react';\nimport Spinner from '../spinner';\nimport ErrorIndicator from '../error-indicator';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst withData = View => {\n  return class extends Component {\n    constructor() {\n      super(...arguments);\n      this.state = {\n        data: null,\n        loading: true,\n        error: false\n      };\n    }\n\n    componentDidUpdate(prevProps) {\n      if (this.props.getData !== prevProps.getData) {\n        this.update();\n      }\n    }\n\n    componentDidMount() {\n      this.update();\n    }\n\n    update() {\n      this.setState({\n        loading: true,\n        error: false\n      });\n      this.props.getData().then(data => {\n        this.setState({\n          data,\n          loading: false\n        });\n      }).catch(() => {\n        this.setState({\n          error: true,\n          loading: false\n        });\n      });\n    }\n\n    render() {\n      const {\n        data,\n        loading,\n        error\n      } = this.state;\n\n      if (loading) {\n        return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 16\n        }, this);\n      }\n\n      if (error) {\n        return /*#__PURE__*/_jsxDEV(ErrorIndicator, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 16\n        }, this);\n      }\n\n      return /*#__PURE__*/_jsxDEV(View, { ...this.props,\n        data: data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 14\n      }, this);\n    }\n\n  };\n};\n\nexport default withData;","map":{"version":3,"sources":["/Users/deniscrish/Documents/react-apps/star-db/src/components/hoc-helpers/with-data.js"],"names":["React","Component","Spinner","ErrorIndicator","withData","View","state","data","loading","error","componentDidUpdate","prevProps","props","getData","update","componentDidMount","setState","then","catch","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,cAAP,MAA2B,oBAA3B;;;AAEA,MAAMC,QAAQ,GAAIC,IAAD,IAAU;AACzB,SAAO,cAAcJ,SAAd,CAAwB;AAAA;AAAA;AAAA,WAE7BK,KAF6B,GAErB;AACNC,QAAAA,IAAI,EAAE,IADA;AAENC,QAAAA,OAAO,EAAE,IAFH;AAGNC,QAAAA,KAAK,EAAE;AAHD,OAFqB;AAAA;;AAQ7BC,IAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC5B,UAAI,KAAKC,KAAL,CAAWC,OAAX,KAAuBF,SAAS,CAACE,OAArC,EAA8C;AAC5C,aAAKC,MAAL;AACD;AACF;;AAEDC,IAAAA,iBAAiB,GAAG;AAClB,WAAKD,MAAL;AACD;;AAEDA,IAAAA,MAAM,GAAG;AACP,WAAKE,QAAL,CAAe;AACbR,QAAAA,OAAO,EAAE,IADI;AAEbC,QAAAA,KAAK,EAAE;AAFM,OAAf;AAKA,WAAKG,KAAL,CAAWC,OAAX,GACGI,IADH,CACSV,IAAD,IAAU;AACd,aAAKS,QAAL,CAAc;AACZT,UAAAA,IADY;AAEZC,UAAAA,OAAO,EAAE;AAFG,SAAd;AAID,OANH,EAOGU,KAPH,CAOS,MAAM;AACX,aAAKF,QAAL,CAAc;AACZP,UAAAA,KAAK,EAAE,IADK;AAEZD,UAAAA,OAAO,EAAE;AAFG,SAAd;AAID,OAZH;AAaD;;AAGDW,IAAAA,MAAM,GAAG;AACP,YAAM;AAAEZ,QAAAA,IAAF;AAAQC,QAAAA,OAAR;AAAiBC,QAAAA;AAAjB,UAA2B,KAAKH,KAAtC;;AAEA,UAAIE,OAAJ,EAAa;AACX,4BAAO,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,gBAAP;AACD;;AAED,UAAIC,KAAJ,EAAW;AACT,4BAAO,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,gBAAP;AACD;;AAED,0BAAO,QAAC,IAAD,OAAU,KAAKG,KAAf;AAAsB,QAAA,IAAI,EAAEL;AAA5B;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;;AApD4B,GAA/B;AAsDD,CAvDD;;AAyDA,eAAeH,QAAf","sourcesContent":["import React, { Component } from 'react';\nimport Spinner from '../spinner';\nimport ErrorIndicator from '../error-indicator';\n\nconst withData = (View) => {\n  return class extends Component {\n\n    state = {\n      data: null,\n      loading: true,\n      error: false\n    };\n\n    componentDidUpdate(prevProps) {\n      if (this.props.getData !== prevProps.getData) {\n        this.update();\n      }\n    }\n\n    componentDidMount() {\n      this.update();\n    }\n\n    update() {\n      this.setState( {\n        loading: true,\n        error: false\n      });\n\n      this.props.getData()\n        .then((data) => {\n          this.setState({\n            data,\n            loading: false\n          });\n        })\n        .catch(() => {\n          this.setState({\n            error: true,\n            loading: false\n          });\n        });\n    }\n\n\n    render() {\n      const { data, loading, error } = this.state;\n\n      if (loading) {\n        return <Spinner />;\n      }\n\n      if (error) {\n        return <ErrorIndicator />;\n      }\n\n      return <View {...this.props} data={data} />;\n    }\n  };\n};\n\nexport default withData;"]},"metadata":{},"sourceType":"module"}