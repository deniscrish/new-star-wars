{"ast":null,"code":"var _jsxFileName = \"/Users/deniscrish/Documents/react-apps/star-db/src/components/random-planet/random-planet.js\";\nimport React, { Component } from 'react';\nimport Spinner from '../spinner';\nimport ErrorIndicator from '../error-indicator';\nimport SwapiService from '../../services/swapi-service';\nimport './random-planet.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class RandomPlanet extends Component {\n  constructor() {\n    super(...arguments);\n    this.swapiService = new SwapiService();\n    this.state = {\n      planet: {},\n      loading: true\n    };\n\n    this.onPlanetLoaded = planet => {\n      this.setState({\n        planet,\n        loading: false,\n        error: false\n      });\n    };\n\n    this.onError = err => {\n      this.setState({\n        error: true,\n        loading: false\n      });\n    };\n\n    this.updatePlanet = () => {\n      const id = Math.floor(Math.random() * 17) + 2;\n      this.swapiService.getPlanet(id).then(this.onPlanetLoaded).catch(this.onError);\n    };\n  }\n\n  componentDidMount() {\n    this.updatePlanet();\n    this.interval = setInterval(this.updatePlanet, 10000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    const {\n      planet,\n      loading,\n      error\n    } = this.state;\n    const hasData = !(loading || error);\n    const errorMessage = error ? /*#__PURE__*/_jsxDEV(ErrorIndicator, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 34\n    }, this) : null;\n    const spinner = loading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 31\n    }, this) : null;\n    const content = hasData ? /*#__PURE__*/_jsxDEV(PlanetView, {\n      planet: planet\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 31\n    }, this) : null;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"random-planet jumbotron rounded\",\n      children: [errorMessage, spinner, content]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst PlanetView = _ref => {\n  let {\n    planet\n  } = _ref;\n  const {\n    id,\n    name,\n    population,\n    rotationPeriod,\n    diameter\n  } = planet;\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"planet-image\",\n      src: `https://starwars-visualguide.com/assets/img/planets/${id}.jpg`,\n      alt: \"planet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"list-group list-group-flush\",\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"list-group-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"term\",\n            children: \"Population\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: population\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"list-group-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"term\",\n            children: \"Rotation Period\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: rotationPeriod\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"list-group-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"term\",\n            children: \"Diameter\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: diameter\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n\n_c = PlanetView;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlanetView\");","map":{"version":3,"sources":["/Users/deniscrish/Documents/react-apps/star-db/src/components/random-planet/random-planet.js"],"names":["React","Component","Spinner","ErrorIndicator","SwapiService","RandomPlanet","swapiService","state","planet","loading","onPlanetLoaded","setState","error","onError","err","updatePlanet","id","Math","floor","random","getPlanet","then","catch","componentDidMount","interval","setInterval","componentWillUnmount","clearInterval","render","hasData","errorMessage","spinner","content","PlanetView","name","population","rotationPeriod","diameter"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport Spinner from '../spinner';\nimport ErrorIndicator from '../error-indicator';\nimport SwapiService from '../../services/swapi-service';\n\nimport './random-planet.css';\n\nexport default class RandomPlanet extends Component {\n\n  swapiService = new SwapiService();\n\n  state = {\n    planet: {},\n    loading: true\n  };\n\n  componentDidMount() {\n    this.updatePlanet();\n    this.interval = setInterval(this.updatePlanet, 10000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  onPlanetLoaded = (planet) => {\n    this.setState({\n      planet,\n      loading: false,\n      error: false\n    });\n  };\n\n  onError = (err) => {\n    this.setState({\n      error: true,\n      loading: false\n    });\n  };\n\n  updatePlanet = () => {\n    const id = Math.floor(Math.random()*17) + 2;\n    this.swapiService\n      .getPlanet(id)\n      .then(this.onPlanetLoaded)\n      .catch(this.onError);\n  };\n\n  render() {\n    const { planet, loading, error } = this.state;\n\n    const hasData = !(loading || error);\n\n    const errorMessage = error ? <ErrorIndicator/> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = hasData ? <PlanetView planet={planet}/> : null;\n\n    return (\n      <div className=\"random-planet jumbotron rounded\">\n        {errorMessage}\n        {spinner}\n        {content}\n      </div>\n    );\n  }\n}\n\nconst PlanetView = ({ planet }) => {\n\n  const { id, name, population,\n    rotationPeriod, diameter } = planet;\n\n  return (\n    <React.Fragment>\n      <img className=\"planet-image\"\n           src={`https://starwars-visualguide.com/assets/img/planets/${id}.jpg`}\n           alt=\"planet\" />\n      <div>\n        <h4>{name}</h4>\n        <ul className=\"list-group list-group-flush\">\n          <li className=\"list-group-item\">\n            <span className=\"term\">Population</span>\n            <span>{population}</span>\n          </li>\n          <li className=\"list-group-item\">\n            <span className=\"term\">Rotation Period</span>\n            <span>{rotationPeriod}</span>\n          </li>\n          <li className=\"list-group-item\">\n            <span className=\"term\">Diameter</span>\n            <span>{diameter}</span>\n          </li>\n        </ul>\n      </div>\n    </React.Fragment>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}