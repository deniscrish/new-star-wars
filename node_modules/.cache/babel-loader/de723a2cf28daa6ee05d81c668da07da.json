{"ast":null,"code":"var _jsxFileName = \"/Users/deniscrish/Documents/react-apps/star-db/src/components/item-details/item-details.js\";\nimport React, { Component } from 'react';\nimport ErrorButton from '../error-button/error-button';\nimport SwapiService from '../../services/swapi-service';\nimport './item-details.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Record = _ref => {\n  let {\n    item,\n    field,\n    label\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    className: \"list-group-item\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"term\",\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: item[field]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Record;\nexport { Record };\nexport default class ItemDetails extends Component {\n  constructor() {\n    super(...arguments);\n    this.swapiService = new SwapiService();\n    this.state = {\n      item: null,\n      image: null\n    };\n  }\n\n  componentDidMount() {\n    this.updateItem();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.itemId !== prevProps.itemId) {\n      this.updateItem();\n    }\n  }\n\n  updateItem() {\n    const {\n      itemId,\n      getData,\n      getImageUrl\n    } = this.props;\n\n    if (!itemId) {\n      return;\n    }\n\n    getData(itemId).then(item => {\n      this.setState({\n        item,\n        image: getImageUrl(item)\n      });\n    });\n  }\n\n  render() {\n    const {\n      item,\n      image\n    } = this.state;\n\n    if (!item) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Select a item from a list\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 14\n      }, this);\n    }\n\n    const {\n      id,\n      name,\n      gender,\n      birthYear,\n      eyeColor\n    } = item;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"item-details card\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"item-image\",\n        src: image,\n        alt: \"item\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"list-group list-group-flush\",\n          children: React.Children.map(this.props.children, child => {\n            return /*#__PURE__*/React.cloneElement(child, {\n              item\n            });\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ErrorButton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Record\");","map":{"version":3,"sources":["/Users/deniscrish/Documents/react-apps/star-db/src/components/item-details/item-details.js"],"names":["React","Component","ErrorButton","SwapiService","Record","item","field","label","ItemDetails","swapiService","state","image","componentDidMount","updateItem","componentDidUpdate","prevProps","props","itemId","getData","getImageUrl","then","setState","render","id","name","gender","birthYear","eyeColor","Children","map","children","child","cloneElement"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AAEA,OAAO,oBAAP;;;AAEA,MAAMC,MAAM,GAAG,QAA4B;AAAA,MAA3B;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,GAA2B;AACzC,sBACE;AAAI,IAAA,SAAS,EAAC,iBAAd;AAAA,4BACE;AAAM,MAAA,SAAS,EAAC,MAAhB;AAAA,gBAAwBA;AAAxB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,gBAAQF,IAAI,CAACC,KAAD;AAAZ;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CAPD;;KAAMF,M;AASN,SACEA,MADF;AAKA,eAAe,MAAMI,WAAN,SAA0BP,SAA1B,CAAoC;AAAA;AAAA;AAAA,SAEjDQ,YAFiD,GAElC,IAAIN,YAAJ,EAFkC;AAAA,SAIjDO,KAJiD,GAIzC;AACNL,MAAAA,IAAI,EAAE,IADA;AAENM,MAAAA,KAAK,EAAE;AAFD,KAJyC;AAAA;;AASjDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,UAAL;AACD;;AAEDC,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC5B,QAAI,KAAKC,KAAL,CAAWC,MAAX,KAAsBF,SAAS,CAACE,MAApC,EAA4C;AAC1C,WAAKJ,UAAL;AACD;AACF;;AAEDA,EAAAA,UAAU,GAAG;AACX,UAAM;AAAEI,MAAAA,MAAF;AAAUC,MAAAA,OAAV;AAAmBC,MAAAA;AAAnB,QAAmC,KAAKH,KAA9C;;AACA,QAAI,CAACC,MAAL,EAAa;AACX;AACD;;AAEDC,IAAAA,OAAO,CAACD,MAAD,CAAP,CACGG,IADH,CACSf,IAAD,IAAU;AACd,WAAKgB,QAAL,CAAc;AACZhB,QAAAA,IADY;AAEZM,QAAAA,KAAK,EAAEQ,WAAW,CAACd,IAAD;AAFN,OAAd;AAID,KANH;AAOD;;AAEDiB,EAAAA,MAAM,GAAG;AAEP,UAAM;AAAEjB,MAAAA,IAAF;AAAQM,MAAAA;AAAR,QAAkB,KAAKD,KAA7B;;AACA,QAAI,CAACL,IAAL,EAAW;AACT,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;;AAED,UAAM;AAAEkB,MAAAA,EAAF;AAAMC,MAAAA,IAAN;AAAYC,MAAAA,MAAZ;AACIC,MAAAA,SADJ;AACeC,MAAAA;AADf,QAC4BtB,IADlC;AAGA,wBACE;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,YAAf;AACE,QAAA,GAAG,EAAEM,KADP;AAEE,QAAA,GAAG,EAAC;AAFN;AAAA;AAAA;AAAA;AAAA,cADF,eAKE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,gCACE;AAAA,oBAAKa;AAAL;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAI,UAAA,SAAS,EAAC,6BAAd;AAAA,oBAEIxB,KAAK,CAAC4B,QAAN,CAAeC,GAAf,CAAmB,KAAKb,KAAL,CAAWc,QAA9B,EAAyCC,KAAD,IAAW;AACjD,gCAAO/B,KAAK,CAACgC,YAAN,CAAmBD,KAAnB,EAA0B;AAAE1B,cAAAA;AAAF,aAA1B,CAAP;AACD,WAFD;AAFJ;AAAA;AAAA;AAAA;AAAA,gBAFF,eASE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,gBATF;AAAA;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAmBD;;AA/DgD","sourcesContent":["import React, { Component } from 'react';\n\nimport ErrorButton from '../error-button/error-button';\nimport SwapiService from '../../services/swapi-service';\n\nimport './item-details.css';\n\nconst Record = ({ item, field, label }) => {\n  return (\n    <li className=\"list-group-item\">\n      <span className=\"term\">{label}</span>\n      <span>{ item[field] }</span>\n    </li>\n  );\n};\n\nexport {\n  Record\n};\n\n\nexport default class ItemDetails extends Component {\n\n  swapiService = new SwapiService();\n\n  state = {\n    item: null,\n    image: null\n  };\n\n  componentDidMount() {\n    this.updateItem();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.itemId !== prevProps.itemId) {\n      this.updateItem();\n    }\n  }\n\n  updateItem() {\n    const { itemId, getData, getImageUrl } = this.props;\n    if (!itemId) {\n      return;\n    }\n\n    getData(itemId)\n      .then((item) => {\n        this.setState({\n          item,\n          image: getImageUrl(item)\n        });\n      });\n  }\n\n  render() {\n\n    const { item, image } = this.state;\n    if (!item) {\n      return <span>Select a item from a list</span>;\n    }\n\n    const { id, name, gender,\n              birthYear, eyeColor } = item;\n\n    return (\n      <div className=\"item-details card\">\n        <img className=\"item-image\"\n          src={image}\n          alt=\"item\"/>\n\n        <div className=\"card-body\">\n          <h4>{name}</h4>\n          <ul className=\"list-group list-group-flush\">\n            {\n              React.Children.map(this.props.children, (child) => {\n                return React.cloneElement(child, { item });\n              })\n            }\n          </ul>\n          <ErrorButton />\n        </div>\n      </div>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}