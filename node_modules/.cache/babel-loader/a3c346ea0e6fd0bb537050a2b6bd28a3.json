{"ast":null,"code":"var _jsxFileName = \"/Users/deniscrish/Documents/react-apps/star-db/src/components/random-planet/random-planet.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Spinner from '../spinner';\nimport ErrorIndicator from '../error-indicator';\nimport SwapiService from '../../services/swapi-service';\nimport './random-planet.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class RandomPlanet extends Component {\n  constructor() {\n    super(...arguments);\n    this.swapiService = new SwapiService();\n    this.state = {\n      planet: {},\n      loading: true\n    };\n\n    this.onPlanetLoaded = planet => {\n      this.setState({\n        planet,\n        loading: false,\n        error: false\n      });\n    };\n\n    this.onError = err => {\n      this.setState({\n        error: true,\n        loading: false\n      });\n    };\n\n    this.updatePlanet = () => {\n      const id = Math.floor(Math.random() * 17) + 2;\n      this.swapiService.getPlanet(id).then(this.onPlanetLoaded).catch(this.onError);\n    };\n  }\n\n  componentDidMount() {\n    const {\n      updateInterval\n    } = this.props;\n    this.updatePlanet();\n    this.interval = setInterval(this.updatePlanet, updateInterval);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    const {\n      planet,\n      loading,\n      error\n    } = this.state;\n    const hasData = !(loading || error);\n    const errorMessage = error ? /*#__PURE__*/_jsxDEV(ErrorIndicator, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 38\n    }, this) : null;\n    const spinner = loading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 35\n    }, this) : null;\n    const content = hasData ? /*#__PURE__*/_jsxDEV(PlanetView, {\n      planet: planet\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 35\n    }, this) : null;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"random-planet jumbotron rounded\",\n      children: [errorMessage, spinner, content]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nRandomPlanet.defaultProps = {\n  updateInterval: 10000\n};\nRandomPlanet.propTypes = {\n  updateInterval: PropTypes.number\n};\n\nconst PlanetView = _ref => {\n  let {\n    planet\n  } = _ref;\n  const {\n    id,\n    name,\n    population,\n    rotationPeriod,\n    diameter\n  } = planet;\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"planet-image\",\n      src: `https://starwars-visualguide.com/assets/img/planets/${id}.jpg`,\n      alt: \"planet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"list-group list-group-flush\",\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"list-group-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"term\",\n            children: \"Population\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: population\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"list-group-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"term\",\n            children: \"Rotation Period\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: rotationPeriod\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"list-group-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"term\",\n            children: \"Diameter\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: diameter\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n};\n\n_c = PlanetView;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlanetView\");","map":{"version":3,"sources":["/Users/deniscrish/Documents/react-apps/star-db/src/components/random-planet/random-planet.js"],"names":["React","Component","PropTypes","Spinner","ErrorIndicator","SwapiService","RandomPlanet","swapiService","state","planet","loading","onPlanetLoaded","setState","error","onError","err","updatePlanet","id","Math","floor","random","getPlanet","then","catch","componentDidMount","updateInterval","props","interval","setInterval","componentWillUnmount","clearInterval","render","hasData","errorMessage","spinner","content","defaultProps","propTypes","number","PlanetView","name","population","rotationPeriod","diameter"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Spinner from '../spinner';\nimport ErrorIndicator from '../error-indicator';\nimport SwapiService from '../../services/swapi-service';\n\nimport './random-planet.css';\n\nexport default class RandomPlanet extends Component {\n\n    static defaultProps = {\n        updateInterval: 10000\n    };\n\n    static propTypes = {\n        updateInterval: PropTypes.number\n    };\n\n    swapiService = new SwapiService();\n\n    state = {\n        planet: {},\n        loading: true\n    };\n\n    componentDidMount() {\n        const { updateInterval } = this.props;\n        this.updatePlanet();\n        this.interval = setInterval(this.updatePlanet, updateInterval);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    onPlanetLoaded = (planet) => {\n        this.setState({\n            planet,\n            loading: false,\n            error: false\n        });\n    };\n\n    onError = (err) => {\n        this.setState({\n            error: true,\n            loading: false\n        });\n    };\n\n    updatePlanet = () => {\n        const id = Math.floor(Math.random() * 17) + 2;\n        this.swapiService\n            .getPlanet(id)\n            .then(this.onPlanetLoaded)\n            .catch(this.onError);\n    };\n\n    render() {\n        const { planet, loading, error } = this.state;\n\n        const hasData = !(loading || error);\n\n        const errorMessage = error ? <ErrorIndicator /> : null;\n        const spinner = loading ? <Spinner /> : null;\n        const content = hasData ? <PlanetView planet={planet} /> : null;\n\n        return (\n            <div className=\"random-planet jumbotron rounded\">\n                {errorMessage}\n                {spinner}\n                {content}\n            </div>\n        );\n    }\n\n}\n\nconst PlanetView = ({ planet }) => {\n\n    const { id, name, population,\n        rotationPeriod, diameter } = planet;\n\n    return (\n        <React.Fragment>\n            <img className=\"planet-image\"\n                src={`https://starwars-visualguide.com/assets/img/planets/${id}.jpg`}\n                alt=\"planet\" />\n            <div>\n                <h4>{name}</h4>\n                <ul className=\"list-group list-group-flush\">\n                    <li className=\"list-group-item\">\n                        <span className=\"term\">Population</span>\n                        <span>{population}</span>\n                    </li>\n                    <li className=\"list-group-item\">\n                        <span className=\"term\">Rotation Period</span>\n                        <span>{rotationPeriod}</span>\n                    </li>\n                    <li className=\"list-group-item\">\n                        <span className=\"term\">Diameter</span>\n                        <span>{diameter}</span>\n                    </li>\n                </ul>\n            </div>\n        </React.Fragment>\n    );\n};"]},"metadata":{},"sourceType":"module"}